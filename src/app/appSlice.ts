import { createSlice, current, PayloadAction } from "@reduxjs/toolkit";
import login from "../features/auth/Login/Login";
import { AxiosError, isAxiosError } from "axios";
import { unhandleAction } from "../common/actions/unhandleAction";

const slice = createSlice({
  name: 'app',
  initialState: {
    error: null as string | null,
    isLoading: false,
    isAppInitialized: false,
    unhandleActions: [] as string[]
  },
  reducers: {
    setIsLoading: (state, action: PayloadAction<{isLoading: boolean}>) => {
      let a = current(state) //real state in "a" for debbuger
      state.isLoading = action.payload.isLoading
    },
    setError: (state, action: PayloadAction<{error: string | null}>) => {
      state.error = action.payload.error
    }
  },
  extraReducers: builder => {
    // —Ç–∞–º –≥–¥–µ –ª–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –Ω–µ–ø–ª–æ—Ö–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å addMatcher
    // –º–∞—Ç—á–µ—Ä(–ø—Ä–µ–¥–∏–∫–∞—Ç) –∏ –ø–æ–¥—Ä–µ–¥—É—Å–µ—Ä
    builder.addMatcher((action)=>{
      console.log('addMatcher predicator: ', action.type)
      // if(action.type === 'auth/register/pending') return false // —á—Ç–æ–±—ã –Ω–µ–±—ã–ª–æ –∫—Ä—É—Ç–∏–ª–∫–∏
      return action.type.endsWith('/pending')
      // return true // —Ç–æ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–µ–¥—É—Å–µ—Ä
    }, (state, action)=>{
      // –Ω–∞ –∫–∞–∂–¥—ã–π —ç–∫—à–µ–Ω –∏ —Å–∫—Ä—ã—Ç—ã–π —ç–∫—à–µ–Ω –≤—ã–∑—ã–≤–∞—é—Ç —ç—Ç–æ –∫–æ–ª–±–µ–∫(–≤ –∞–¥–º–∞—Ç—á–µ—Ä), –µ—Å–ª–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç –≤–æ–∑–≤—Ä. true
      // –º–æ–∂–Ω–æ –ª–æ–∂–∏—Ç—å –≤ –ª—é–±–æ–π —Å–ª–∞–π–±, –±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã
      console.log('‚úÖ addMatcher: ', action.type)
      state.isLoading = true
    })
      .addMatcher((action)=>{
        return action.type.endsWith('/rejected')
      }, (state, action)=>{

        const err = action.payload as Error | AxiosError<{ error: string }>;
        if (isAxiosError(err)) {
          const error = err.response ? err.response.data.error : err.message;
          state.error = error
          // dispatch(appActions.setError({ error }));
        } else {
          state.error = `Native error ${err.message}`
          // dispatch(appActions.setError({ error: `Native error ${err.message}` }));
        }

        state.isLoading = false
      })
      .addMatcher((action)=>{
        return action.type.endsWith('/fulfilled')
      }, (state)=>{
        state.isLoading = false
      })
      .addDefaultCase((state, action) => {
        // debugger
        console.log("addDefaultCase üöÄ", action.type);
        state.unhandleActions.push(action.type)
      });
  }
}) // –≤ –∏—Ç–æ–≥–µ –≤—ã–∏—Ä—ã—à(—Ä–µ—Ä–µ–Ω–¥–µ—Ä?) —ç–∫—à–µ–Ω setIsLoading –¥–∏—Å–ø–∞—á–µ—Ç—Å—è –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º(–≤ Redux tools –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è)

export const appReducer = slice.reducer
export const appActions = slice.actions

